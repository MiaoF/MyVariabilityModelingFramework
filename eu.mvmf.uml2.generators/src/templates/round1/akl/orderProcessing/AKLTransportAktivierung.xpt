«DEFINE Root FOR uml::Model»
«FILE "AklTransportAktivierung.cs"»  
//******************************************************************************
// NAME: AklTransportAktivierung.cs
//******************************************************************************
// Copyright (C) Siemens AG 2010. Confidential. All rights reserved.
//******************************************************************************

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using Sgm.Akl.Arbeitsplaetze;
using Sgm.Akl.AutomatikTransporte;
using Sgm.Base.Auftraege;
using Sgm.Base.Zyklus;
using Siemens.WarehouseManagement.ContractInfrastructure.Expressions;
using Siemens.WarehouseManagement.ContractInfrastructure.SystemParametersPresenter;
using Siemens.WarehouseManagement.DataAccess;
using Siemens.WarehouseManagement.MaterialManagement;
using Siemens.WarehouseManagement.TransportManagement.ReservationsLocks;
using Siemens.WarehouseManagement.Infrastructure.Configuration;
using Siemens.WarehouseManagement.TransportManagement.TransportMediumAdapters;
using Siemens.WarehouseManagement.Validation;
using Siemens.WarehouseManagement.TransportManagement;
using Sgm.Base.SgmPhysik;
using LocationNotFoundException = Siemens.WarehouseManagement.UserManagementPresenter.LocationNotFoundException;
using Sgm.Base;


namespace Sgm.Akl
{
  /// <summary>
  /// Aktiviert einen generierten Transportauftrag und legt dabei das Ziel fest
  /// </summary>
  public class AklTransportAktivierung : Zyklisch, IAklTransportAktivierung, IAutomatikTransportObserver
  {
    // Logger
    private static log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

    #region Properties

    private Observable<IAklTransportAktivierungObserver> _observers = new Observable<IAklTransportAktivierungObserver>();

    private IAutomatikTransport _automatikTransport;

    /// <summary>
    /// Zugriff auf die AutomatikTransport-Komponente
    /// Beim setzten wird die AklTransportAktivierung als Observer bei
    /// AutomatikTransport angemeldet. 
    /// </summary>
    [RequiredProperty]
    public IAutomatikTransport AutomatikTransport
    {
      get
      {
        return _automatikTransport;
      }
      set
      {
        if (_automatikTransport != null)
        {
          ((AutomatikTransport)_automatikTransport).RemoveObserver(this);
        }

        _automatikTransport = value;
        ((AutomatikTransport)_automatikTransport).AddObserver(this);
      }
    }

    /// <summary>
    /// Gets or sets the storage bin search.
    /// </summary>
    /// <value>The storage bin search.</value>
    [RequiredProperty]
    public IStorageBinSearch StorageBinSearch { get; set; }

    /// <summary>
    /// Zugriff auf die SgmPhysik
    /// </summary>
    [RequiredProperty]
    public ISgmPhysik SgmPhysik { get; set; }

    /// <summary>
    /// Zugriff auf die Akl Arbeitsplaetze
    /// </summary>
    [RequiredProperty]
    public IAklArbeitsplatzVerwaltung AklArbeitsplatzVerwaltung { get; set; }

    /// <summary>
    /// Zugriff auf die Reservation Modification
    /// </summary>
    [RequiredProperty]
    public IReservationModification ReservationModification { get; set; }

    [RequiredProperty]
    public ITeilauftragVerwaltung TeilauftragVerwaltung { get; set; }
    /// <summary>
    /// Zugriff auf die Datenbank
    /// </summary>
    [RequiredProperty]
    public IDataAccessRegistry DataAccessRegistry { get; set; }
    private IDataAccess DataAccess
    {
      get
      {
        return DataAccessRegistry.GetDataAccess();
      }
    }

    [RequiredProperty]
    public ISystemParameters SystemParameters { get; set; }

    #endregion Properties

    #region Overrides of Zyklisch

      /// <summary>
    /// Wird zyklisch oder vom User aufgerufen und überprüft, ob
    /// TordRequests verarbeitet werden können und verarbeitet diese ggf.
    /// Nach der erfolgreichen Verarbeitung eines TordRequest, wird er gelöscht
    /// </summary>
    public override void ZyklischeAktion()
    {
      _log.Info("Start AklTransportAktivierung.ZyklischeAktion()");
      _log.Debug("AklTransportAktivierung: Versuche Tords aus TordRequests zu erzeugen");

      VerarbeiteTordRequests();
      _log.Info("Ende AklTransportAktivierung.ZyklischeAktion()");
    }

    #endregion

    #region Hilfsfunktionen

    private void VerarbeiteTordRequests()
    {
      _log.Debug("Starte VerarbeiteTordRequest für aktive Teilauftraege");

      // Zuerst die TordRequest, die zu einem schon aktiven Teilauftrag gehören 
      Query queryAktive = GetTordsReqsFuerAktiveTeilauftraegeQuery();
      var result = DataAccess.ExecuteQuery(queryAktive);

      foreach (var row in result)
      {
        IDictionary<string, object> localRow = row;
        DataAccess.ExecuteTransacted(() => VerarbeiteAktiveAuslagerungTordRequest(localRow));
      }

      _log.Debug("Starte VerarbeiteTordRequest für noch nicht aktivierte Teilauftraege");
      // Überprüfen ob ein neuer Teilauftrag für einen Arbeitsplatz freigeschaltet werden kann
      // Überprüfen ob ein Arbeitsplatz auf einen neuen Auftrag wartet in der ArbeitsplatzVerwaltung
      IList<Arbeitsplatz> arbeitsplaetze = AklArbeitsplatzVerwaltung.ArbeitsplaetzeBereitZurKommissionierung();
      int anzArbeitsplaetze = arbeitsplaetze.Count;
      if (anzArbeitsplaetze > 0)
      {
        _log.InfoFormat("Arbeitsplätze [{0}] können einen neuen Auftrag aufnehmen", string.Join("],[", arbeitsplaetze.Select(a => a.Name).ToArray()));

        IList<Teilauftrag> moeglicheTeilauftraege = ErmittleAlleNichtAktiviertenTeilauftraege(anzArbeitsplaetze);
        foreach (Teilauftrag teilauftrag in moeglicheTeilauftraege)
        {
          if (anzArbeitsplaetze == 0)
            break;

          Arbeitsplatz zielArbeitsplatz = arbeitsplaetze[anzArbeitsplaetze - 1];
          Teilauftrag derTeilauftrag = teilauftrag;

          ErzeugeTordsFuerTeilauftragZuArbeitsplatz(derTeilauftrag, zielArbeitsplatz);

          anzArbeitsplaetze = anzArbeitsplaetze - 1;
        }
      }


      _log.Debug("Starte VerarbeiteTordRequest für Einlagerung/Leertablarauslagerung");
      // Jetzt die TordRequests, die keinem Kommissionier-Auftrag zugeordnet sind 
      IList<TordRequest> tordRequests = GetNichtKommissionierTordRequests();
      // Die TordRequests müssen je nach Transport Typ unterschiedlich behandelt werden 
      foreach (TordRequest tordRequest in tordRequests)
      {
        TordRequest request = tordRequest;

        switch (request.TransportTyp)
        {
          case TordRequest.TransportTypValue.Einlagerung:
            DataAccess.ExecuteTransacted(() => VerarbeiteEinlagerungTordRequest(request));
            break;
          case TordRequest.TransportTypValue.Leerbehaelter:
            DataAccess.ExecuteTransacted(() => VerarbeiteLeerbehaelterTordRequest(request));
            break;
          case TordRequest.TransportTypValue.ManuelleAuslagerung:
          case TordRequest.TransportTypValue.Inventur:
            DataAccess.ExecuteTransacted(() => VerarbeiteManuelleAuslagerungTordRequest(request));
            break;

        }
      }

      _log.Debug("Beende VerarbeiteTordRequest");
    }


    private SgmLocation GetUebergabeplatzFuerArbeitsplatz(SgmLocation arbeitsplatzLocation)
    {
      SgmLocation uebergabeplatz;
      switch (arbeitsplatzLocation.Name)
      {
        case "1234":
          {
            uebergabeplatz = (SgmLocation)SgmPhysik.GetLocationByName(ConstDirectory.LOC_NAME_UEBERGABEPLATZ_KP3);
            return uebergabeplatz;
          }
        case "1225":
          {
            uebergabeplatz = (SgmLocation)SgmPhysik.GetLocationByName(ConstDirectory.LOC_NAME_UEBERGABEPLATZ_KP2);
            return uebergabeplatz;
          }
        case "1214":
          {
            uebergabeplatz = (SgmLocation)SgmPhysik.GetLocationByName(ConstDirectory.LOC_NAME_UEBERGABEPLATZ_KP1);
            return uebergabeplatz;
          }
        default:
          {
            throw new LocationNotFoundException(arbeitsplatzLocation.Name);
          }
      }
    }

    private IList<TordRequest> GetNichtKommissionierTordRequests()
    {
      Query query = new Query("TordRequestesFuerZulagerung");
      query.From<TordRequest>();
      query.Where(Expression.Or(
                    Expression.IsEqual(TordRequest.Properties.TransportTyp,
                                       new ConstantExpression(TordRequest.TransportTypValue.Einlagerung)),
                    Expression.IsEqual(TordRequest.Properties.TransportTyp,
                                       new ConstantExpression(TordRequest.TransportTypValue.Leerbehaelter)),
                    Expression.IsEqual(TordRequest.Properties.TransportTyp,
                                       new ConstantExpression(TordRequest.TransportTypValue.Inventur)),
                    Expression.IsEqual(TordRequest.Properties.TransportTyp,
                                       new ConstantExpression(TordRequest.TransportTypValue.ManuelleAuslagerung))));

      return DataAccess.ExecuteQuery(query,
                                     row =>
                                     (TordRequest)row[TordRequest.Properties.AliasName]);
    }

    private Query GetTordsReqsFuerAktiveTeilauftraegeQuery()
    {
      Query query = new Query("TordReqsMitAktivemAuftrag");
      query.From<TordRequest>();
      query.InnerJoin<SgmTu>(Expression.IsEqual(TordRequest.Properties.TuName, SgmTu.Properties.Name));
      query.InnerJoin<Teilauftrag>(Expression.IsEqual(TordRequest.Properties.TeilauftragId, Teilauftrag.Properties.Id));
      query.LeftOuterJoin<ArbeitsplatzQueue>(Expression.IsEqual(Teilauftrag.Properties.Id, ArbeitsplatzQueue.Properties.TaId));
      query.LeftOuterJoin<Arbeitsplatz>(Expression.IsEqual(Teilauftrag.Properties.Id, Arbeitsplatz.Properties.TaId));

      query.Where(TordRequest.Properties.TransportTyp.Filter(TordRequest.TransportTypValue.Auslagerung));
      query.Where(Teilauftrag.Properties.LagerTeil.Filter(Teilauftrag.LagerTeilValue.Akl));
      query.Where(Teilauftrag.Properties.Status.Filter(Teilauftrag.StatusValue.Aktiv));

      return query;
    }


    /// <summary>
    /// Erzeugt einen Tord für jeden TordRequest eines Teilauftrags zu einem Arbeitsplatz
    /// </summary>
    /// <param name="teilauftrag"></param>
    /// <param name="zielArbeitsplatz"></param>
    void ErzeugeTordsFuerTeilauftragZuArbeitsplatz(Teilauftrag teilauftrag, Arbeitsplatz zielArbeitsplatz)
    {
      Query query = new Query("TordRequestsFuerDenTeilauftragZumFreischalten");
      query.From<TordRequest>();
      query.Where(TordRequest.Properties.TeilauftragId.Filter(teilauftrag.Id));

      IList<TordRequest> tordRequests = DataAccess.ExecuteQuery(query, row => (TordRequest)row[TordRequest.Properties.AliasName]);
      foreach (TordRequest tordRequest in tordRequests)
      {

        DataAccess.ExecuteTransacted(() => { VerarbeiteTeilauftragTordRequest(teilauftrag, tordRequest, zielArbeitsplatz); });
      }
    }

    private void VerarbeiteTeilauftragTordRequest(Teilauftrag teilauftrag, TordRequest tordRequest, Arbeitsplatz zielArbeitsplatz)
    {
      SgmTu tu = (SgmTu)SgmPhysik.GetTu(tordRequest.TuName);

      SgmLocation quellLocation = (SgmLocation)SgmPhysik.GetLocationByTuName(tordRequest.TuName);
      if (quellLocation.Type == Location.TypeValue.BinPosition)
      {
        SgmLocation zielLocation = (SgmLocation)SgmPhysik.GetLocationByName(zielArbeitsplatz.ArbeitsplatzLoc);
        MoveType moveType = DataAccess.SelectFirst<MoveType>(MoveType.Properties.No.Filter(2));
        IDictionary<string, string> zusaetlicheDaten = new Dictionary<string, string>();
        zusaetlicheDaten.Add("HOEHE", ((int)tu.Hoehe).ToString());

        bool transportAccepted = AutomatikTransport.Transportiere(tu, quellLocation, zielLocation, moveType, false,
                                                                  zusaetlicheDaten);
        if (transportAccepted)
        {
          LoescheTordRequest(tordRequest);
          TeilauftragVerwaltung.SetzeEntnahmenStatusFuerTeilauftragUndTuAufTordAngelegt(tu.Name, teilauftrag.Id);
          // Die AklArbeitsplatzLogik soll dem Arbeitplatz diesen Teilauftrag zuordnen
          _observers.InformObservers(x => x.KommissionierAuslagerungBegonnen(teilauftrag, zielArbeitsplatz));
        }
      }
      else
      {
        _log.DebugFormat(
          "TordRequest [{0}] für Tu [{1}] und Teilauftrag [{2}] wird nicht aktiviert, da die Tu nicht im Lager (sondern auf [{3}]) steht",
          tordRequest.Id, tordRequest.TuName, tordRequest.TeilauftragId, quellLocation.Name);
      }
    }

    /// <summary>
    ///  Liefert ein Liste aller Teilauftraege, die bereit sind für einen Arbeitsplatz aktiviert zu werden.
    /// </summary>
    /// <returns></returns>
    private IList<Teilauftrag> ErmittleAlleNichtAktiviertenTeilauftraege(int anzArbeitsplaetze)
    {
      int minimumAuslagerbareTablare = Math.Abs(SystemParameters.GetInt32("MINIMUM_AUSLAGERBEREITE_TABLARE", 10));

      Query query = new Query("NochNichtAktiveTAuftraege");
      query.From<Teilauftrag>();
      query.Where(Expression.And(
        Teilauftrag.Properties.Status.Filter(BinaryExpressionOperator.GreaterEqual, Teilauftrag.StatusValue.MaterialErmittelt),
        Teilauftrag.Properties.Status.Filter(BinaryExpressionOperator.LessThan, Teilauftrag.StatusValue.Kommissioniert)      
        ));

      query.InnerJoin<Auftrag>(Expression.IsEqual(Teilauftrag.Properties.AufId, Auftrag.Properties.Id));
      query.OrderBy(OrderByDirection.Desc(Teilauftrag.Properties.Status), Auftrag.Properties.Prio, Auftrag.Properties.SapStart, Teilauftrag.Properties.DatiAngelegt);

      IList<IDictionary<string, object>> teilauftraege = DataAccess.ExecuteQuery(query);

      IList<Teilauftrag> moeglicheTeilauftraege = new List<Teilauftrag>();

      // Pro Teilauftrag müssen entweder
      // +  alle Tablare zur Auslagerung bereit sein, wenn nichts gesperrt ist oder
      //  + mindestens x (6 zu beginn) Tablare frei geschaltet werden 
      foreach (IDictionary<string, object> teilauftragRow in teilauftraege)
      {
        Teilauftrag teilauftrag = (Teilauftrag)teilauftragRow[Teilauftrag.Properties.DHName];

        query = GetDatenZumTeilauftragQuery(teilauftrag);
        query.GroupBy<SgmTu>();

        int tuCounter = DataAccess.ExecuteCountQuery(query, "TuCount");
        if(tuCounter == 0)
        {
          continue;
        }

        query.Where(Location.Properties.Type.Filter(BinaryExpressionOperator.NotEqual, Location.TypeValue.BinPosition));
        int tuGesperrtCounter = DataAccess.ExecuteCountQuery(query, "TuNichImFachCnt");

        query = GetDatenZumTeilauftragQuery(teilauftrag);
        query.GroupBy<Reservation>();
        query.Where(Reservation.Properties.LocName.Filter(BinaryExpressionOperator.NotEqual, null));
        tuGesperrtCounter += DataAccess.ExecuteCountQuery(query, "TuReserviertCnt");

        query = GetDatenZumTeilauftragQuery(teilauftrag);
        query.GroupBy<Tord>();
        query.Where(Tord.Properties.Id.Filter(BinaryExpressionOperator.NotEqual, null));
        int tordCounter = DataAccess.ExecuteCountQuery(query, "TordCnt");

        if (tordCounter == 0 && tuGesperrtCounter == 0)
        {
          moeglicheTeilauftraege.Add(teilauftrag);
        }
        else if ((tuCounter - tordCounter - tuGesperrtCounter) >= minimumAuslagerbareTablare)
        {
          moeglicheTeilauftraege.Add(teilauftrag);
        }
        else
        {
          _log.InfoFormat("TordRequests für Teilauftrag [{0}] zu Auftrag [{1}] können im moment nicht aktiviert werden, da [{2}]/[{3}] zugehörige Tablare gesperrt sind",
                          teilauftrag.Id, teilauftrag.AufId, tuGesperrtCounter, tuCounter);
        }

        // Aufhören weiter zu suchen wenn bereits die benötigte Anzahl von Aufträgen gefunden wurde.
        if (moeglicheTeilauftraege.Count >= anzArbeitsplaetze)
        {
          return moeglicheTeilauftraege;
        }
      }

      return moeglicheTeilauftraege;
    }

    private Query GetDatenZumTeilauftragQuery(Teilauftrag teilauftrag)
    {
      Query query;
      query = new Query("DatenZumTeilauftrag");
      query.From<TordRequest>();
      query.Where(TordRequest.Properties.TeilauftragId.Filter(teilauftrag.Id));
      query.InnerJoin<SgmTu>(
        Expression.IsEqual(TordRequest.Properties.TuName, SgmTu.Properties.Name));
      query.InnerJoin<Location>(
        Expression.IsEqual(Location.Properties.Name, SgmTu.Properties.LocName));
      query.LeftOuterJoin<Tord>(
        Expression.IsEqual(TordRequest.Properties.TuName, Tord.Properties.TruName));
      query.LeftOuterJoin<Reservation>(
        Expression.IsEqual(Reservation.Properties.TuName, SgmTu.Properties.Name));
      return query;
    }

    private Query GetTeilauftragDatenQuery(Teilauftrag teilauftrag)
    {
      Query query;
      query = new Query("DatenZumTeilauftrag");
      query.From<TordRequest>();
      query.Where(TordRequest.Properties.TeilauftragId.Filter(teilauftrag.Id));
      query.InnerJoin<SgmTu>(
        Expression.IsEqual(TordRequest.Properties.TuName, SgmTu.Properties.Name));
      query.LeftOuterJoin<Tord>(
        Expression.IsEqual(TordRequest.Properties.TuName, Tord.Properties.TruName));
      query.LeftOuterJoin<Reservation>(
        Expression.IsEqual(Reservation.Properties.TuName, SgmTu.Properties.Name));
      return query;
    }

    /// <summary>
    /// Verarbeitet alle TordRequests vom Typ Einlagerung
    /// </summary>
    /// <param name="tordRequest">der TordRequest</param>
    private void VerarbeiteEinlagerungTordRequest(TordRequest tordRequest)
    {
      SgmTu tu = (SgmTu)SgmPhysik.GetTu(tordRequest.TuName);

      if (tu == null)
      {
        throw new TuNotFoundException(tordRequest.TuName);
      }

      SgmLocation zielLocation;
      try
      {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        zielLocation = (SgmLocation)StorageBinSearch.GetLocationFor(tu);
        sw.Stop();

        if (zielLocation == null)
        {
          throw new NoStorageBinFoundException(tu.Name);
        }

        _log.InfoFormat("Leerplatz [{0}] für Tu [{1}] in [{2}]ms gefunden. Wird reserviert.", zielLocation.Name, tu.Name, sw.ElapsedMilliseconds);
        // Sicherstellen, dass keine andere Vorreservierung existiert.
        ReservationModification.DeletePrereservation(tu);
        ReservationModification.PreReserve(zielLocation, tu);

      }
      catch (NoStorageBinFoundException)
      {
        //kein Lagerplatz gefunden => tordRequest bleibt bestehen und wird im nächsten zyklus
        //erneut bearbeitet
        _log.InfoFormat("Keinen Lagerplatz für Tu [{0}] mit Hoehe[{1}] gefunden", tu.Name, tu.Hoehe);
        return;
      }

      SgmLocation quellLocation = (SgmLocation)SgmPhysik.GetLocationByTuName(tu.Name);
      MoveType moveType = DataAccess.SelectFirst<MoveType>(MoveType.Properties.No.Filter(1));

      IDictionary<string, string> zusaetlicheDaten = new Dictionary<string, string>();
      zusaetlicheDaten.Add("HOEHE", ((int)tu.Hoehe).ToString());

      if (AutomatikTransport.Transportiere(tu, quellLocation, zielLocation, moveType, false, zusaetlicheDaten))
      {
        LoescheTordRequest(tordRequest);
      }
      else
      {
        // Platz wieder frei geben.
        ReservationModification.DeletePrereservation(tu);
      }
    }

    /// <summary>
    /// Verarbeitet alle TordRequests vom Typ LeerbehaelterAuftrag
    /// </summary>
    /// <param name="tordRequest"></param>
    private void VerarbeiteLeerbehaelterTordRequest(TordRequest tordRequest)
    {
      // Arbeitsplatz ermitteln
      Arbeitsplatz arbeitsplatz = AklArbeitsplatzVerwaltung.GetArbeitsplatzByLocation(tordRequest.ZielLoc);

      if (false == AklArbeitsplatzVerwaltung.IsArbeitsplatzInModus(arbeitsplatz, Arbeitsplatz.ModusValue.Einlagerung))
      {
        // Wenn der Arbeitsplatz im falschen Modus ist
        _log.InfoFormat("TordRequest [{0}] nicht freigeschaltet, da Arbeitsplatz [{1}] nicht im Modus 'Einlagerung' ist",
                        tordRequest.Id, arbeitsplatz.Name);
        return;
      }

      // Die freie Kapazität des Auslagerplatzes
      int freieKappa = ReservationModification.GetUnreservedCapacity(arbeitsplatz.GetArbeitsplatzLoc(DataAccess));

      if (freieKappa == 0)
      {
        // Keine Kapazität frei
        _log.InfoFormat("TordRequest [{0}] nicht freigeschaltet, da der Arbeitsplatz [{1}] keine freie Kapazitaet mehr hat",
                        tordRequest.Id, arbeitsplatz.Name);
        return;
      }

      // Daten für Tord ermitteln
      SgmTu tu = (SgmTu)SgmPhysik.GetTu(tordRequest.TuName);
      SgmLocation quellLocation = (SgmLocation)SgmPhysik.GetLocationByTuName(tordRequest.TuName);
      if (quellLocation.Type == Location.TypeValue.BinPosition)
      {
        SgmLocation zielLocation = (SgmLocation)SgmPhysik.GetLocationByName(tordRequest.ZielLoc);
        MoveType moveType = DataAccess.SelectFirst<MoveType>(MoveType.Properties.No.Filter(2));
        IDictionary<string, string> zusaetlicheDaten = new Dictionary<string, string>();
        zusaetlicheDaten.Add("HOEHE", ((int)tu.Hoehe).ToString());
        // Tord anlegen
        if (AutomatikTransport.Transportiere(tu, quellLocation, zielLocation, moveType, false, zusaetlicheDaten))
        {
          LoescheTordRequest(tordRequest);
          _observers.InformObservers(o => o.LeerberhaelterAuslagerungBegonnen(tu));
        }
      }
      else
      {
        _log.DebugFormat("TordRequest [{0}] für Tu [{1}] und Teilauftrag [{2}] wird nicht aktiviert, da die Tu nicht im Lager (sondern auf [{3}]) steht", tordRequest.Id, tordRequest.TuName, tordRequest.TeilauftragId, quellLocation.Name);

      }
    }

    /// <summary>
    /// Verarbeitet alle TordRequests, die aktiven Teilauftraegen zugeordnet sind
    /// </summary>
    /// <param name="row"></param>
    private void VerarbeiteAktiveAuslagerungTordRequest(IDictionary<string, object> row)
    {
      TordRequest tordRequest = (TordRequest)row[TordRequest.Properties.AliasName];
      Teilauftrag teilauftrag = (Teilauftrag)row[Teilauftrag.Properties.AliasName];
      Arbeitsplatz arbeitsplatz = (Arbeitsplatz)row[Arbeitsplatz.Properties.AliasName];
      // Überprüfen ob der Teilauftrag dem Arbetisplatz zugeordnet ist
      if (arbeitsplatz.TaId == null)
      {
        ArbeitsplatzQueue arbeitsplatzQueue = (ArbeitsplatzQueue) row[ArbeitsplatzQueue.Properties.AliasName];
        //Überprüfen ob der Teilauftrag in der ArbeitsplatzQueue steht
        try
        {
          arbeitsplatz =
            AklArbeitsplatzVerwaltung.GetArbeitsplatzById(
              ((ArbeitsplatzQueue) row[ArbeitsplatzQueue.Properties.AliasName]).ArbId);
        }
        catch (NullReferenceException excp)
        {
          // Der Fall tritt ein, wenn das letzte Tablar zu einem Teilauftrag eine lokale Fehlmenge liefert
          IList<Arbeitsplatz> arbeitsplaetze = AklArbeitsplatzVerwaltung.ArbeitsplaetzeBereitZurKommissionierung();
          if (arbeitsplaetze.Count == 0)
          {
            _log.WarnFormat(
              "TordRequest[{0}] für aktiven Teilauftrag[{1}] kann nicht aktiviert werden, da kein Arbeitplatz verfügbar ist.",
              tordRequest.Id, teilauftrag.Id);
            return;
          }
          arbeitsplatz = arbeitsplaetze[0];
        }
      }

      SgmTu tu = (SgmTu)row[SgmTu.Properties.AliasName];

      // Überprüfen ob noch irgendwelche Reservierungen für die Tu existieren
      var reservations = ReservationModification.GetReservations(tu);

      if (reservations == null || reservations.Count == 0)
      {
        // Daten für Tord ermitteln
        SgmLocation quellLocation = (SgmLocation)SgmPhysik.GetLocationByTuName(tu.Name);
        if (quellLocation.Type == Location.TypeValue.BinPosition)
        {
          SgmLocation zielLocation = (SgmLocation)SgmPhysik.GetLocationByName(arbeitsplatz.ArbeitsplatzLoc);
          MoveType moveType = DataAccess.SelectFirst<MoveType>(MoveType.Properties.No.Filter(2));

          IDictionary<string, string> zusaetlicheDaten = new Dictionary<string, string>();
          zusaetlicheDaten.Add("HOEHE", ((int)tu.Hoehe).ToString());
          // Falls noch ein Tord für die Tu existiert wird ein Fehler geworfen. Diesen hier fangen und tracen.
          if (AutomatikTransport.Transportiere(tu, quellLocation, zielLocation, moveType, false, zusaetlicheDaten))
          {
            LoescheTordRequest(tordRequest);
            TeilauftragVerwaltung.SetzeEntnahmenStatusFuerTeilauftragUndTuAufTordAngelegt(tu.Name, teilauftrag.Id);

            //// Die AklArbeitsplatzLogik soll dem Arbeitplatz diesen Teilauftrag zuordnen
            _observers.InformObservers(x => x.KommissionierAuslagerungBegonnen(teilauftrag, arbeitsplatz));

          }
        }
        else
        {
          _log.DebugFormat("TordRequest [{0}] für Tu [{1}] und Teilauftrag [{2}] wird nicht aktiviert, da die Tu nicht im Lager (sondern auf [{3}]) steht", tordRequest.Id, tordRequest.TuName, tordRequest.TeilauftragId, quellLocation.Name);
        }
      }
      else
      {
        _log.DebugFormat("TordRequest [{0}] für Tu [{1}] und Teilauftrag [{2}] wird nicht aktiviert, da für die Tu Reservierungen bestehen", tordRequest.Id, tordRequest.TuName, tordRequest.TeilauftragId);
      }
    }

    private void VerarbeiteManuelleAuslagerungTordRequest(TordRequest tordRequest)
    {
      // Arbeitsplatz ermitteln
      Arbeitsplatz arbeitsplatz = AklArbeitsplatzVerwaltung.GetArbeitsplatzByLocation(tordRequest.ZielLoc);

      // Die freie Kapazität des Auslagerplatzes
      int freieKappa = ReservationModification.GetUnreservedCapacity(arbeitsplatz.GetArbeitsplatzLoc(DataAccess));

      if (freieKappa <= 0)
      {
        // Keine Kapazität frei
        _log.InfoFormat("TordRequest [{0}] nicht freigeschaltet, da der Arbeitsplatz [{1}] keine freie Kapazitaet mehr hat",
                        tordRequest.Id, arbeitsplatz.Name);
        return;
      }

      AktiviereTordRequest(tordRequest);

    }

    private void AktiviereTordRequest(TordRequest tordRequest)
    {
      // Daten für Tord ermitteln
      SgmTu tu = (SgmTu)SgmPhysik.GetTu(tordRequest.TuName);
      SgmLocation quellLocation = (SgmLocation)SgmPhysik.GetLocationByTuName(tordRequest.TuName);
      if (quellLocation.Type == Location.TypeValue.BinPosition)
      {
        SgmLocation zielLocation = (SgmLocation)SgmPhysik.GetLocationByName(tordRequest.ZielLoc);
        MoveType moveType = DataAccess.SelectFirst<MoveType>(MoveType.Properties.No.Filter(2));
        IDictionary<string, string> zusaetlicheDaten = new Dictionary<string, string>();
        zusaetlicheDaten.Add("HOEHE", ((int)tu.Hoehe).ToString());
        // Tord anlegen
        if (AutomatikTransport.Transportiere(tu, quellLocation, zielLocation, moveType, false, zusaetlicheDaten))
        {
          LoescheTordRequest(tordRequest);
        }
      }
      else
      {
        _log.DebugFormat("TordRequest [{0}] für manuelle Auslagerung wird nicht aktiviert, da die Tu [{1}] nicht im Lager (sondern auf [{2}]) steht", tordRequest.Id, tordRequest.TuName, quellLocation.Name);
      }
    }


    /// <summary>
    /// Wird aufgerufen wenn ein TordRequest abgearbeitet wurde und gelöscht werden soll.
    /// </summary>
    /// <param name="tordRequest">Der zu löschende TordRequest</param>
    private void LoescheTordRequest(TordRequest tordRequest)
    {
      DataAccess.Delete(tordRequest);

      _log.InfoFormat("TordRequest ID [{0}] für TU [{1}], Teilauftrag [{2}] in TORD umgewandelt und gelöscht", tordRequest.Id,
                      tordRequest.TuName, tordRequest.TeilauftragId);
    }


    #endregion

    #region IAklTransportAktivierung

    public void AddObserver(IAklTransportAktivierungObserver observer)
    {
      _observers.AddObserver(observer);
    }

    public void RemoveObserver(IAklTransportAktivierungObserver observer)
    {
      _observers.RemoveObserver(observer);
    }

    /// <summary>
    /// Legt einen Tord vom Arbeitsplatz zum Übergabeplatz des Verschiebewagens an.
    /// </summary>
    /// <param name="tu">die Tu zum abtransportieren</param>
    /// <returns></returns>
    public void TransportiereWegVomArbeitsplatz(SgmTu tu)
    {
      if (tu == null) throw new ArgumentNullException("tu");

      SgmLocation standort = (SgmLocation)SgmPhysik.GetLocationByTuName(tu.Name);

      SgmLocation uebergabeplatz = GetUebergabeplatzFuerArbeitsplatz(standort);

      MoveType moveType = DataAccess.SelectFirst<MoveType>(MoveType.Properties.No.Filter(1));

      IDictionary<string, string> zusaetlicheDaten = new Dictionary<string, string>();
      zusaetlicheDaten.Add("HOEHE", ((int)tu.Hoehe).ToString());

      AutomatikTransport.Transportiere(tu, standort, uebergabeplatz, moveType, false, zusaetlicheDaten);
    }
    #endregion

    #region IAutomatikTransportObserver

    public void TuAmPufferHeber(SgmTu tu, IDictionary<string, string> additionalPlcData)
    {
    }

    public void TuAmArbeitsplatz(SgmTu tu, SgmLocation location)
    {
    }

    /// <summary>
    /// Diese Funktion wird von AutomatikTransport aufgerufen, wenn ein Transport abgeschlossen
    /// wurde.
    /// </summary>
    /// <param name="tu">Die transportierte Tu</param>
    /// <param name="tord">der abgeschlossene Transport</param>
    public void TransportAbgeschlossen(SgmTu tu, TransportOrder tord)
    {
      if (tu == null)
      {
        throw new ArgumentNullException("tu");
      }
      if (tord == null)
      {
        throw new ArgumentNullException("tord");
      }

      _log.DebugFormat("TransportAbgeschlossen für Tu [{0}], Tord [{1}], MoveType [{2}] gestartet",
                       tu.Name, tord.TordID, tord.MoveTypeNo);

      if (tord.MoveTypeNo.Equals(1))
      {
        //es handelt sich um eine Einlagerung
        _observers.InformObservers(o => o.TuEingelagert(tu));
      }
      if (tord.MoveTypeNo.Equals(2))
      {
        //es handlet sich um eine Auslagerung
        _observers.InformObservers(o => o.TuAusgelagert(tu));
      }

      //TransportAktivierung kann den nächsten TordRequest aktivieren
      Aufwecken();
    }

    public void TuAmZusammenfuehrPlatz(SgmTu tu)
    {

    }

    public void TuGepuffert(SgmTu tu)
    {

    }

    public void TuAmUebergabePlatzVerschiebewagen(SgmTu tu)
    {
      // nichts tun
    }

    public void TuAmRbgAbgabeplatz(SgmTu tu)
    {

    }

    #endregion
  }
}


//******************************************************************************
// Copyright (C) Siemens AG 2010. Confidential. All rights reserved.
//******************************************************************************
«ENDFILE»
«ENDDEFINE»